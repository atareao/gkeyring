#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# A helper for use GNOME Keyring from terminal
#
# Copyright (C) 2018 Lorenzo Carbonell
# lorenzo.carbonell.cerezo@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import keyring
from optparse import OptionParser
_ = str


def main():
        usage_msg = _('usage: %prog [options]')
        parser = OptionParser(usage=usage_msg, add_help_option=False)
        parser.add_option('-r', '--ring',
                          action='store',
                          dest='ring',
                          default=False,
                          help=_('the name of the keyring (default "system").'))
        parser.add_option('-g', '--get',
                          action='store_true',
                          dest='get',
                          default=False,
                          help=_('get password.'))
        parser.add_option('-d', '--delete',
                          action='store_true',
                          dest='delete',
                          default=False,
                          help=_('delete a password.'))
        parser.add_option('-h', '--help',
                          action='store_true',
                          dest='help',
                          default=False,
                          help=_('show this help and exit.'))
        parser.add_option('-k', '--key',
                          action='store',
                          dest='key',
                          default=False,
                          help=_('key for the password.'))
        parser.add_option('-p', '--password',
                          action='store',
                          dest='password',
                          default=False,
                          help=_('the password.'))
        parser.add_option('-s', '--set',
                          action='store_true',
                          dest='set',
                          default=False,
                          help=_('set password.'))
        (options, args) = parser.parse_args()
        if options.get:
            if options.key is False:
                print(_('Error, "password key" is missing'))
            else:
                try:
                    if options.ring is False:
                        keyring_name = 'system'
                    else:
                        keyring_name = str(options.ring)
                    keyring.get_keyring()
                    ans = keyring.get_password(keyring_name, options.key)
                    if ans is None:
                        exit(-1)
                    else:
                        print(ans)
                    return
                except Exception as e:
                    print(e)
        if options.delete:
            if options.key is False:
                print(_('Error, "password key" is missing'))
            else:
                try:
                    if options.ring is False:
                        keyring_name = 'system'
                    else:
                        keyring_name = str(options.ring)
                    keyring.get_keyring()
                    keyring.delete_password(keyring_name, options.key)
                except Exception as e:
                    print(e)
        elif options.set:
            if options.key is False:
                print(_('Error, "password key" is missing'))
            else:
                if options.password is False:
                    print(_('Error, "password" is missing'))
                else:
                    try:
                        if options.ring is False:
                            keyring_name = 'system'
                        else:
                            keyring_name = str(options.ring)
                        keyring.get_keyring()
                        keyring.set_password(keyring_name, options.key,
                                             options.password)
                        return
                    except Exception as e:
                        print(e)
        parser.print_help()
        exit()


if __name__ == '__main__':
    main()
    exit(0)
